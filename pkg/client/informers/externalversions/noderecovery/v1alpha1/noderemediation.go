/*
 * This file is part of the KubeVirt project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Copyright 2018 Red Hat, Inc.
 *
 */
// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	time "time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	noderecovery_v1alpha1 "kubevirt.io/node-recovery/pkg/apis/noderecovery/v1alpha1"
	versioned "kubevirt.io/node-recovery/pkg/client/clientset/versioned"
	internalinterfaces "kubevirt.io/node-recovery/pkg/client/informers/externalversions/internalinterfaces"
	v1alpha1 "kubevirt.io/node-recovery/pkg/client/listers/noderecovery/v1alpha1"
)

// NodeRemediationInformer provides access to a shared informer and lister for
// NodeRemediations.
type NodeRemediationInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.NodeRemediationLister
}

type nodeRemediationInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewNodeRemediationInformer constructs a new informer for NodeRemediation type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewNodeRemediationInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredNodeRemediationInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredNodeRemediationInformer constructs a new informer for NodeRemediation type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredNodeRemediationInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.NoderecoveryV1alpha1().NodeRemediations().List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.NoderecoveryV1alpha1().NodeRemediations().Watch(options)
			},
		},
		&noderecovery_v1alpha1.NodeRemediation{},
		resyncPeriod,
		indexers,
	)
}

func (f *nodeRemediationInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredNodeRemediationInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *nodeRemediationInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&noderecovery_v1alpha1.NodeRemediation{}, f.defaultInformer)
}

func (f *nodeRemediationInformer) Lister() v1alpha1.NodeRemediationLister {
	return v1alpha1.NewNodeRemediationLister(f.Informer().GetIndexer())
}
