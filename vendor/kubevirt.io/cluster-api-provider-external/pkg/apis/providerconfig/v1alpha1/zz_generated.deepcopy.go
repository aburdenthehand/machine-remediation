// +build !ignore_autogenerated

/*
 * This file is part of the KubeVirt project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Copyright 2018 Red Hat, Inc.
 *
 */

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DynamicConfigElement) DeepCopyInto(out *DynamicConfigElement) {
	*out = *in
	if in.Default != nil {
		in, out := &in.Default, &out.Default
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DynamicConfigElement.
func (in *DynamicConfigElement) DeepCopy() *DynamicConfigElement {
	if in == nil {
		return nil
	}
	out := new(DynamicConfigElement)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalClusterProviderConfig) DeepCopyInto(out *ExternalClusterProviderConfig) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	if in.FencingConfigs != nil {
		in, out := &in.FencingConfigs, &out.FencingConfigs
		*out = make([]FencingConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalClusterProviderConfig.
func (in *ExternalClusterProviderConfig) DeepCopy() *ExternalClusterProviderConfig {
	if in == nil {
		return nil
	}
	out := new(ExternalClusterProviderConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ExternalClusterProviderConfig) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalMachineProviderConfig) DeepCopyInto(out *ExternalMachineProviderConfig) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	if in.FencingConfig != nil {
		in, out := &in.FencingConfig, &out.FencingConfig
		if *in == nil {
			*out = nil
		} else {
			*out = new(FencingConfig)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]MachineRole, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalMachineProviderConfig.
func (in *ExternalMachineProviderConfig) DeepCopy() *ExternalMachineProviderConfig {
	if in == nil {
		return nil
	}
	out := new(ExternalMachineProviderConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ExternalMachineProviderConfig) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FencingConfig) DeepCopyInto(out *FencingConfig) {
	*out = *in
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	if in.NodeSelector != nil {
		in, out := &in.NodeSelector, &out.NodeSelector
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Container != nil {
		in, out := &in.Container, &out.Container
		if *in == nil {
			*out = nil
		} else {
			*out = new(v1.Container)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]v1.Volume, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CheckArgs != nil {
		in, out := &in.CheckArgs, &out.CheckArgs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.CreateArgs != nil {
		in, out := &in.CreateArgs, &out.CreateArgs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DeleteArgs != nil {
		in, out := &in.DeleteArgs, &out.DeleteArgs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.RebootArgs != nil {
		in, out := &in.RebootArgs, &out.RebootArgs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.DynamicConfig != nil {
		in, out := &in.DynamicConfig, &out.DynamicConfig
		*out = make([]DynamicConfigElement, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Secrets != nil {
		in, out := &in.Secrets, &out.Secrets
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.TimeoutSeconds != nil {
		in, out := &in.TimeoutSeconds, &out.TimeoutSeconds
		if *in == nil {
			*out = nil
		} else {
			*out = new(int32)
			**out = **in
		}
	}
	if in.RetrySeconds != nil {
		in, out := &in.RetrySeconds, &out.RetrySeconds
		if *in == nil {
			*out = nil
		} else {
			*out = new(int32)
			**out = **in
		}
	}
	if in.Retries != nil {
		in, out := &in.Retries, &out.Retries
		if *in == nil {
			*out = nil
		} else {
			*out = new(int32)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FencingConfig.
func (in *FencingConfig) DeepCopy() *FencingConfig {
	if in == nil {
		return nil
	}
	out := new(FencingConfig)
	in.DeepCopyInto(out)
	return out
}
